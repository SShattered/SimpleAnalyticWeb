@using SimpleAnalyticApp.Models

@inject SimpleAnalyticApp.Services.ITaskService TaskService;

@if (Visible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">

                <EditForm Model="@TaskModel" OnValidSubmit="@(string.IsNullOrEmpty(TaskModel.Id) ? AddTask : EditTask)">
                    <div class="modal-header">
                        <h5 class="modal-title">@(string.IsNullOrEmpty(TaskModel.Id) ? "Create Task": "Update Task")</h5>
                        <button type="button" class="btn-close" @onclick="Close"></button>
                    </div>

                    <div class="modal-body">

                        <div class="mb-3">
                            <label class="form-label">Task Name</label>
                            <InputText class="form-control" @bind-Value="TaskModel.TaskName" required />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Yolo Model</label>
                            <select class="form-select" @bind="TaskModel.ModelType">
                                <option value="">-- Select a model --</option>
                                @foreach (var item in YoloModels)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Model Variation</label>
                            <select class="form-select" @bind="TaskModel.ModelVariation">
                                <option value="">-- Select a variation --</option>
                                @foreach (var item in YoloVariations)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Detection</label>
                            <select class="form-select" @bind="TaskModel.Detection">
                                <option value="">-- Select a detection --</option>
                                @foreach (var item in DetectionsArray)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Input URL</label>
                            <InputText class="form-control" @bind-Value="TaskModel.InputURL" required />
                        </div>

                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@IsSubmitDisabled">@(string.IsNullOrEmpty(TaskModel.Id) ? "Submit" : "Update")</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public string[] DetectionsArray { get; set; }
    [Parameter] public EventCallback RefreshList { get; set; }
    [Parameter] public TaskModel TaskModel { get; set; } = new();

    private TaskModel InitForm()
    {
        return new TaskModel()
        {

            TaskName = string.Empty,
            ModelType = string.Empty,
            ModelVariation = string.Empty,
            Detection = string.Empty,
            InputURL = string.Empty,
        };
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //TaskModel = InitForm();
    }

    private bool IsSubmitDisabled =>
        string.IsNullOrEmpty(TaskModel.ModelType) || 
        string.IsNullOrEmpty(TaskModel.ModelVariation) || 
        string.IsNullOrEmpty(TaskModel.Detection);

    private List
    <string> YoloModels = new()
    {
        "Yolo11",
        "Yolo8"
    };

    private List<string> YoloVariations = new()
    {
        "Nano",
        "Small",
        "Large"
    };

    private async Task Close()
    {
        if(RefreshList.HasDelegate)
        {
            await RefreshList.InvokeAsync();
        }
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task AddTask()
    {
        await TaskService.AddTask(TaskModel);
        await Close();
    }

    private async Task EditTask()
    {
        await TaskService.UpdateTask(TaskModel);
        await Close();
    }
}